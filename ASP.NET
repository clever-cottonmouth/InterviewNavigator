
What are solid principles ?

S- Single responsibility - Each class should have single job/responsibility.
O - Open/Closed Principle. Classes must be open to extension but closed to modification.
L - Liskov principle - If class A is subtype of class B then, Class B should be able to replace Class A with out disrupting the behaviour of our program.
I - Interface segregation - Larger interfaces must be split into smaller interfaces.
D - Dependency inversion - High level modules should not depend on low level modules. Both must depend on abstraction.
_____________________________________________________________________________________________________________________________________________________________________________________________________________
What are DRY, YAGNI, KISS principles ?

DRY- Do not repeat yourself.
Avoid duplication. Makes the software more maintainable and less error-prone.

YAGNI - You are not going to need it.
Avoid unnecessary features/functionalities to the software. This helps software focussed on essential requirements and makes it more maintainable.

KISS: Keep the implementation simple,stupid.
Keeping the software design and implementation as simple as possible.
This make software more understandable,maintainable and testable.
______________________________________________________________________________________________________________________________________________________________________________________________________________
//Remove Vowels
using System;
using System.Linq;
public class HelloWorld
{
    public static void Main(string[] args)
    {
        string vowels = "aeiou";
        string name = "Some Name with vowels";
        name = new string(name.Where(c => !vowels.Contains(c)).ToArray());
        Console.WriteLine (name);
    }
}
_______________________________________________________________________________________________________________________________________________________________________________________________________________
How to reverse the order of words in a given string
using System;
using System.Linq;

class Program
{
    static void Main()
    {
        string input = "Hello world how are you";
        string[] words = input.Split(' ');
        var reversedWords = words.Reverse();
        string reversedString = string.Join(" ", reversedWords);
        Console.WriteLine(reversedString);
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++
Reverse Word
using System;
using System.Linq;

class Program
{
    static void Main()
    {
        string word = "Hello";
        string reversedWord = new string(word.Reverse().ToArray());
        Console.WriteLine(reversedWord);
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++
reverse only word
using System;
using System.Linq;

class Program
{
    static void Main()
    {
        string input = "Hello world how are you";
        string[] words = input.Split(' ');
        var reversedWords = words.Select(word => new string(word.Reverse().ToArray()));
        string reversedString = string.Join(" ", reversedWords);
        Console.WriteLine(reversedString); 
    }
}
_______________________________________________________________________________________________________________________________________________________________________________________________________________
numbers.Insert(0, elementToAdd);
numbers.Add(1)'

_______________________________________________________________________________________________________________________________________________________________________________________________________________
